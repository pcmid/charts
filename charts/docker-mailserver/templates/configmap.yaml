---
apiVersion: "v1"
kind: "ConfigMap"
metadata:
  labels:
    {{- include "dockermailserver.labels" . | nindent 4 }}
  name: {{ template "dockermailserver.fullname" . }}-configs
data:
  postfix-main.cf: |
    # postfix-main.cf
    mydestination = localhost.$mydomain, localhost
  {{/* Enable proxy protocol for postscreen / dovecot */}}
  {{- if or .Values.haproxy.enabled .Values.proxyProtocol.enabled }}  # Necessary to permit proxy protocol from haproxy to postscreen
    postscreen_upstream_proxy_protocol = haproxy
  {{- end }}
  {{- if not .Values.spfTestsDisabled }}
    smtpd_recipient_restrictions = permit_sasl_authenticated, permit_mynetworks, reject_unauth_destination, reject_unauth_pipelining, reject_invalid_helo_hostname, reject_non_fqdn_helo_hostname, reject_unknown_recipient_domain, reject_rbl_client zen.spamhaus.org, reject_rbl_client bl.spamcop.net{{ range .Values.rblRejectDomains }}, reject_rbl_client {{ . }}{{ end }}
  {{- end }}

  postfix-master.cf: |
    # postfix-master.cf
  {{- if index .Values.extraConfigFiles "postfix-master.cf" }}
    {{- get .Values.extraConfigFiles "postfix-master.cf" | nindent 4 }}
  {{- end }}
    # Necessary to permit proxy protocol from haproxy to smtpd
  {{- if or .Values.haproxy.enabled .Values.proxyProtocol.enabled }}
    submission/inet/smtpd_upstream_proxy_protocol=haproxy
    submissions/inet/smtpd_upstream_proxy_protocol=haproxy
  {{- end }}

  dovecot.cf: |
    # dovecot.cf
  {{- if index .Values.extraConfigFiles "dovecot.cf" }}
    {{- get .Values.extraConfigFiles "dovecot.cf" | nindent 4 }}
  {{- end }}

  dovecot-services.conf: |
    # dovecot-services.conf
  {{- if or .Values.haproxy.enabled .Values.proxyProtocol.enabled }}
    haproxy_trusted_networks = {{ .Values.proxyProtocol.trustedNetworks }}
  {{ end }}
    service imap-login {
      inet_listener imap {
      {{- if or .Values.haproxy.enabled .Values.proxyProtocol.enabled }}
        haproxy = yes
        port = 10143
      {{- end }}
      {{- if or .Values.ssl.enabled }}
        ssl = yes
      {{- end }}
      }
      inet_listener imaps {
      {{- if or .Values.haproxy.enabled .Values.proxyProtocol.enabled }}
        haproxy = yes
        port = 10993
      {{- end }}
        ssl = yes
      }
    }
    service pop3-login {
      inet_listener pop3 {
      {{- if or .Values.haproxy.enabled .Values.proxyProtocol.enabled }}
        haproxy = yes
        port = 10110
      {{- end }}
      {{- if or .Values.ssl.enabled }}
        ssl = yes
      {{- end }}
      }
      inet_listener pop3s {
      {{- if or .Values.haproxy.enabled .Values.proxyProtocol.enabled }}
        haproxy = yes
        port = 10995
      {{- end }}
        ssl = yes
      }
    }

  dovecot-director.conf: |
    # dovecot-director.conf
    director_mail_servers = {{ template "dockermailserver.fullname" . }}-headless
    #director_consistent_hashing = yes
    auth_socket_path = director-userdb
    service director {
      fifo_listener login/proxy-notify {
        mode = 0600
        user = $default_login_user
      }
      inet_listener {
        port = 9090
      }
      unix_listener director-userdb {
        mode = 0600
      }
      unix_listener login/director {
        mode = 0666
      }
      unix_listener director-admin {
        mode = 0600
      }
    }
    service ipc {
      unix_listener ipc {
        user = dovecot
      }
    }
    service imap-login {
      executable = imap-login director
    }
    service pop3-login {
      executable = pop3-login director
    }
    service managesieve-login {
      executable = managesieve-login director
    }

  dovecot-override-sieve.conf: |
    # dovecot-override-sieve.conf
    plugin {
      sieve = /var/mail/sieve/%d/%n/.dovecot.sieve
      sieve_dir = /var/mail/sieve/%d/%n/sieve
    }

  dkim_signing.conf: |
    # documentation: https://rspamd.com/doc/modules/dkim_signing.html

    enabled = true;

    sign_authenticated = true;
    sign_local = true;

    use_domain = "header";
    use_redis = false;   # don't change unless Redis also provides the DKIM keys
    use_esld = true;

    check_pubkey = true; # you wan't to use this in the beginning

    domain {
      {{- range $domain := .Values.domains }}
      {{- $path := printf "/tmp/docker-mailserver/dkimkeys/%s/mail.private" . }}
      {{ $domain }} {
        path = {{ $path }};
        selector = "mail";
      }
    {{- end }}
    }

  am-i-healthy.sh: |
    #!/bin/bash
    # this script is intended to be used by periodic kubernetes liveness probes to ensure that the container
    # (and all its dependent services) is healthy
    {{ range .Values.livenessTests.commands -}}
    {{ . }} && \
    {{- end }}
    echo "All healthy"

  {{- (.Files.Get "config/fail2ban-*.cf") | nindent 2 }}
